/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.twitter.zipkin.gen;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

/**
 * A modified version of the Annotation struct that brings in more information
 */
public class TimelineAnnotation implements TBase<TimelineAnnotation, TimelineAnnotation._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("TimelineAnnotation");

  private static final TField TIMESTAMP_FIELD_DESC = new TField("timestamp", TType.I64, (short)1);
  private static final TField VALUE_FIELD_DESC = new TField("value", TType.STRING, (short)2);
  private static final TField HOST_FIELD_DESC = new TField("host", TType.STRUCT, (short)3);
  private static final TField SPAN_ID_FIELD_DESC = new TField("span_id", TType.I64, (short)4);
  private static final TField PARENT_ID_FIELD_DESC = new TField("parent_id", TType.I64, (short)5);
  private static final TField SERVICE_NAME_FIELD_DESC = new TField("service_name", TType.STRING, (short)6);
  private static final TField SPAN_NAME_FIELD_DESC = new TField("span_name", TType.STRING, (short)7);

  public long timestamp;
  public String value;
  public com.twitter.zipkin.gen.Endpoint host;
  public long span_id;
  public long parent_id;
  public String service_name;
  public String span_name;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    TIMESTAMP((short)1, "timestamp"),
    VALUE((short)2, "value"),
    HOST((short)3, "host"),
    SPAN_ID((short)4, "span_id"),
    PARENT_ID((short)5, "parent_id"),
    SERVICE_NAME((short)6, "service_name"),
    SPAN_NAME((short)7, "span_name");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIMESTAMP
          return TIMESTAMP;
        case 2: // VALUE
          return VALUE;
        case 3: // HOST
          return HOST;
        case 4: // SPAN_ID
          return SPAN_ID;
        case 5: // PARENT_ID
          return PARENT_ID;
        case 6: // SERVICE_NAME
          return SERVICE_NAME;
        case 7: // SPAN_NAME
          return SPAN_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private static final int __SPAN_ID_ISSET_ID = 1;
  private static final int __PARENT_ID_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIMESTAMP, new FieldMetaData("timestamp", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.VALUE, new FieldMetaData("value", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.HOST, new FieldMetaData("host", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, com.twitter.zipkin.gen.Endpoint.class)));
    tmpMap.put(_Fields.SPAN_ID, new FieldMetaData("span_id", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.PARENT_ID, new FieldMetaData("parent_id", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.SERVICE_NAME, new FieldMetaData("service_name", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SPAN_NAME, new FieldMetaData("span_name", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(TimelineAnnotation.class, metaDataMap);
  }

  public TimelineAnnotation() {
  }

  public TimelineAnnotation(
    long timestamp,
    String value,
    com.twitter.zipkin.gen.Endpoint host,
    long span_id,
    String service_name,
    String span_name)
  {
    this();
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.value = value;
    this.host = host;
    this.span_id = span_id;
    setSpan_idIsSet(true);
    this.service_name = service_name;
    this.span_name = span_name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TimelineAnnotation(TimelineAnnotation other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.timestamp = other.timestamp;
    if (other.isSetValue()) {
      this.value = other.value;
    }
    if (other.isSetHost()) {
      this.host = new com.twitter.zipkin.gen.Endpoint(other.host);
    }
    this.span_id = other.span_id;
    this.parent_id = other.parent_id;
    if (other.isSetService_name()) {
      this.service_name = other.service_name;
    }
    if (other.isSetSpan_name()) {
      this.span_name = other.span_name;
    }
  }

  public TimelineAnnotation deepCopy() {
    return new TimelineAnnotation(this);
  }

  @Override
  public void clear() {
    setTimestampIsSet(false);
    this.timestamp = 0;
    this.value = null;
    this.host = null;
    setSpan_idIsSet(false);
    this.span_id = 0;
    setParent_idIsSet(false);
    this.parent_id = 0;
    this.service_name = null;
    this.span_name = null;
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public TimelineAnnotation setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been asigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
  }

  public String getValue() {
    return this.value;
  }

  public TimelineAnnotation setValue(String value) {
    this.value = value;
    return this;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been asigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  public com.twitter.zipkin.gen.Endpoint getHost() {
    return this.host;
  }

  public TimelineAnnotation setHost(com.twitter.zipkin.gen.Endpoint host) {
    this.host = host;
    return this;
  }

  public void unsetHost() {
    this.host = null;
  }

  /** Returns true if field host is set (has been asigned a value) and false otherwise */
  public boolean isSetHost() {
    return this.host != null;
  }

  public void setHostIsSet(boolean value) {
    if (!value) {
      this.host = null;
    }
  }

  public long getSpan_id() {
    return this.span_id;
  }

  public TimelineAnnotation setSpan_id(long span_id) {
    this.span_id = span_id;
    setSpan_idIsSet(true);
    return this;
  }

  public void unsetSpan_id() {
    __isset_bit_vector.clear(__SPAN_ID_ISSET_ID);
  }

  /** Returns true if field span_id is set (has been asigned a value) and false otherwise */
  public boolean isSetSpan_id() {
    return __isset_bit_vector.get(__SPAN_ID_ISSET_ID);
  }

  public void setSpan_idIsSet(boolean value) {
    __isset_bit_vector.set(__SPAN_ID_ISSET_ID, value);
  }

  public long getParent_id() {
    return this.parent_id;
  }

  public TimelineAnnotation setParent_id(long parent_id) {
    this.parent_id = parent_id;
    setParent_idIsSet(true);
    return this;
  }

  public void unsetParent_id() {
    __isset_bit_vector.clear(__PARENT_ID_ISSET_ID);
  }

  /** Returns true if field parent_id is set (has been asigned a value) and false otherwise */
  public boolean isSetParent_id() {
    return __isset_bit_vector.get(__PARENT_ID_ISSET_ID);
  }

  public void setParent_idIsSet(boolean value) {
    __isset_bit_vector.set(__PARENT_ID_ISSET_ID, value);
  }

  public String getService_name() {
    return this.service_name;
  }

  public TimelineAnnotation setService_name(String service_name) {
    this.service_name = service_name;
    return this;
  }

  public void unsetService_name() {
    this.service_name = null;
  }

  /** Returns true if field service_name is set (has been asigned a value) and false otherwise */
  public boolean isSetService_name() {
    return this.service_name != null;
  }

  public void setService_nameIsSet(boolean value) {
    if (!value) {
      this.service_name = null;
    }
  }

  public String getSpan_name() {
    return this.span_name;
  }

  public TimelineAnnotation setSpan_name(String span_name) {
    this.span_name = span_name;
    return this;
  }

  public void unsetSpan_name() {
    this.span_name = null;
  }

  /** Returns true if field span_name is set (has been asigned a value) and false otherwise */
  public boolean isSetSpan_name() {
    return this.span_name != null;
  }

  public void setSpan_nameIsSet(boolean value) {
    if (!value) {
      this.span_name = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((String)value);
      }
      break;

    case HOST:
      if (value == null) {
        unsetHost();
      } else {
        setHost((com.twitter.zipkin.gen.Endpoint)value);
      }
      break;

    case SPAN_ID:
      if (value == null) {
        unsetSpan_id();
      } else {
        setSpan_id((Long)value);
      }
      break;

    case PARENT_ID:
      if (value == null) {
        unsetParent_id();
      } else {
        setParent_id((Long)value);
      }
      break;

    case SERVICE_NAME:
      if (value == null) {
        unsetService_name();
      } else {
        setService_name((String)value);
      }
      break;

    case SPAN_NAME:
      if (value == null) {
        unsetSpan_name();
      } else {
        setSpan_name((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TIMESTAMP:
      return new Long(getTimestamp());

    case VALUE:
      return getValue();

    case HOST:
      return getHost();

    case SPAN_ID:
      return new Long(getSpan_id());

    case PARENT_ID:
      return new Long(getParent_id());

    case SERVICE_NAME:
      return getService_name();

    case SPAN_NAME:
      return getSpan_name();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TIMESTAMP:
      return isSetTimestamp();
    case VALUE:
      return isSetValue();
    case HOST:
      return isSetHost();
    case SPAN_ID:
      return isSetSpan_id();
    case PARENT_ID:
      return isSetParent_id();
    case SERVICE_NAME:
      return isSetService_name();
    case SPAN_NAME:
      return isSetSpan_name();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TimelineAnnotation)
      return this.equals((TimelineAnnotation)that);
    return false;
  }

  public boolean equals(TimelineAnnotation that) {
    if (that == null)
      return false;

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }

    boolean this_present_host = true && this.isSetHost();
    boolean that_present_host = true && that.isSetHost();
    if (this_present_host || that_present_host) {
      if (!(this_present_host && that_present_host))
        return false;
      if (!this.host.equals(that.host))
        return false;
    }

    boolean this_present_span_id = true;
    boolean that_present_span_id = true;
    if (this_present_span_id || that_present_span_id) {
      if (!(this_present_span_id && that_present_span_id))
        return false;
      if (this.span_id != that.span_id)
        return false;
    }

    boolean this_present_parent_id = true && this.isSetParent_id();
    boolean that_present_parent_id = true && that.isSetParent_id();
    if (this_present_parent_id || that_present_parent_id) {
      if (!(this_present_parent_id && that_present_parent_id))
        return false;
      if (this.parent_id != that.parent_id)
        return false;
    }

    boolean this_present_service_name = true && this.isSetService_name();
    boolean that_present_service_name = true && that.isSetService_name();
    if (this_present_service_name || that_present_service_name) {
      if (!(this_present_service_name && that_present_service_name))
        return false;
      if (!this.service_name.equals(that.service_name))
        return false;
    }

    boolean this_present_span_name = true && this.isSetSpan_name();
    boolean that_present_span_name = true && that.isSetSpan_name();
    if (this_present_span_name || that_present_span_name) {
      if (!(this_present_span_name && that_present_span_name))
        return false;
      if (!this.span_name.equals(that.span_name))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TimelineAnnotation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TimelineAnnotation typedOther = (TimelineAnnotation)other;

    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = TBaseHelper.compareTo(this.value, typedOther.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHost()).compareTo(typedOther.isSetHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHost()) {
      lastComparison = TBaseHelper.compareTo(this.host, typedOther.host);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpan_id()).compareTo(typedOther.isSetSpan_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpan_id()) {
      lastComparison = TBaseHelper.compareTo(this.span_id, typedOther.span_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParent_id()).compareTo(typedOther.isSetParent_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParent_id()) {
      lastComparison = TBaseHelper.compareTo(this.parent_id, typedOther.parent_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetService_name()).compareTo(typedOther.isSetService_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetService_name()) {
      lastComparison = TBaseHelper.compareTo(this.service_name, typedOther.service_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpan_name()).compareTo(typedOther.isSetSpan_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpan_name()) {
      lastComparison = TBaseHelper.compareTo(this.span_name, typedOther.span_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // TIMESTAMP
          if (field.type == TType.I64) {
            this.timestamp = iprot.readI64();
            setTimestampIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // VALUE
          if (field.type == TType.STRING) {
            this.value = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // HOST
          if (field.type == TType.STRUCT) {
            this.host = new com.twitter.zipkin.gen.Endpoint();
            this.host.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // SPAN_ID
          if (field.type == TType.I64) {
            this.span_id = iprot.readI64();
            setSpan_idIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // PARENT_ID
          if (field.type == TType.I64) {
            this.parent_id = iprot.readI64();
            setParent_idIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // SERVICE_NAME
          if (field.type == TType.STRING) {
            this.service_name = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // SPAN_NAME
          if (field.type == TType.STRING) {
            this.span_name = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
    oprot.writeI64(this.timestamp);
    oprot.writeFieldEnd();
    if (this.value != null) {
      oprot.writeFieldBegin(VALUE_FIELD_DESC);
      oprot.writeString(this.value);
      oprot.writeFieldEnd();
    }
    if (this.host != null) {
      oprot.writeFieldBegin(HOST_FIELD_DESC);
      this.host.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(SPAN_ID_FIELD_DESC);
    oprot.writeI64(this.span_id);
    oprot.writeFieldEnd();
    if (isSetParent_id()) {
      oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
      oprot.writeI64(this.parent_id);
      oprot.writeFieldEnd();
    }
    if (this.service_name != null) {
      oprot.writeFieldBegin(SERVICE_NAME_FIELD_DESC);
      oprot.writeString(this.service_name);
      oprot.writeFieldEnd();
    }
    if (this.span_name != null) {
      oprot.writeFieldBegin(SPAN_NAME_FIELD_DESC);
      oprot.writeString(this.span_name);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TimelineAnnotation(");
    boolean first = true;

    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("value:");
    if (this.value == null) {
      sb.append("null");
    } else {
      sb.append(this.value);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("host:");
    if (this.host == null) {
      sb.append("null");
    } else {
      sb.append(this.host);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("span_id:");
    sb.append(this.span_id);
    first = false;
    if (isSetParent_id()) {
      if (!first) sb.append(", ");
      sb.append("parent_id:");
      sb.append(this.parent_id);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("service_name:");
    if (this.service_name == null) {
      sb.append("null");
    } else {
      sb.append(this.service_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("span_name:");
    if (this.span_name == null) {
      sb.append("null");
    } else {
      sb.append(this.span_name);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

