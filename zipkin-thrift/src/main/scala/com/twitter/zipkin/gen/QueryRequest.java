/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.twitter.zipkin.gen;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class QueryRequest implements TBase<QueryRequest, QueryRequest._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("QueryRequest");

  private static final TField SERVICE_NAME_FIELD_DESC = new TField("service_name", TType.STRING, (short)1);
  private static final TField SPAN_NAME_FIELD_DESC = new TField("span_name", TType.STRING, (short)2);
  private static final TField ANNOTATIONS_FIELD_DESC = new TField("annotations", TType.LIST, (short)3);
  private static final TField BINARY_ANNOTATIONS_FIELD_DESC = new TField("binary_annotations", TType.LIST, (short)4);
  private static final TField END_TS_FIELD_DESC = new TField("end_ts", TType.I64, (short)5);
  private static final TField LIMIT_FIELD_DESC = new TField("limit", TType.I32, (short)6);
  private static final TField ORDER_FIELD_DESC = new TField("order", TType.I32, (short)7);

  public String service_name;
  public String span_name;
  public List<String> annotations;
  public List<com.twitter.zipkin.gen.BinaryAnnotation> binary_annotations;
  public long end_ts;
  public int limit;
  /**
   * 
   * @see Order
   */
  public Order order;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SERVICE_NAME((short)1, "service_name"),
    SPAN_NAME((short)2, "span_name"),
    ANNOTATIONS((short)3, "annotations"),
    BINARY_ANNOTATIONS((short)4, "binary_annotations"),
    END_TS((short)5, "end_ts"),
    LIMIT((short)6, "limit"),
    /**
     * 
     * @see Order
     */
    ORDER((short)7, "order");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SERVICE_NAME
          return SERVICE_NAME;
        case 2: // SPAN_NAME
          return SPAN_NAME;
        case 3: // ANNOTATIONS
          return ANNOTATIONS;
        case 4: // BINARY_ANNOTATIONS
          return BINARY_ANNOTATIONS;
        case 5: // END_TS
          return END_TS;
        case 6: // LIMIT
          return LIMIT;
        case 7: // ORDER
          return ORDER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __END_TS_ISSET_ID = 0;
  private static final int __LIMIT_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SERVICE_NAME, new FieldMetaData("service_name", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SPAN_NAME, new FieldMetaData("span_name", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.ANNOTATIONS, new FieldMetaData("annotations", TFieldRequirementType.OPTIONAL, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.STRING))));
    tmpMap.put(_Fields.BINARY_ANNOTATIONS, new FieldMetaData("binary_annotations", TFieldRequirementType.OPTIONAL, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, com.twitter.zipkin.gen.BinaryAnnotation.class))));
    tmpMap.put(_Fields.END_TS, new FieldMetaData("end_ts", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.LIMIT, new FieldMetaData("limit", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.ORDER, new FieldMetaData("order", TFieldRequirementType.DEFAULT, 
        new EnumMetaData(TType.ENUM, Order.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(QueryRequest.class, metaDataMap);
  }

  public QueryRequest() {
  }

  public QueryRequest(
    String service_name,
    long end_ts,
    int limit,
    Order order)
  {
    this();
    this.service_name = service_name;
    this.end_ts = end_ts;
    setEnd_tsIsSet(true);
    this.limit = limit;
    setLimitIsSet(true);
    this.order = order;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryRequest(QueryRequest other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetService_name()) {
      this.service_name = other.service_name;
    }
    if (other.isSetSpan_name()) {
      this.span_name = other.span_name;
    }
    if (other.isSetAnnotations()) {
      List<String> __this__annotations = new ArrayList<String>();
      for (String other_element : other.annotations) {
        __this__annotations.add(other_element);
      }
      this.annotations = __this__annotations;
    }
    if (other.isSetBinary_annotations()) {
      List<com.twitter.zipkin.gen.BinaryAnnotation> __this__binary_annotations = new ArrayList<com.twitter.zipkin.gen.BinaryAnnotation>();
      for (com.twitter.zipkin.gen.BinaryAnnotation other_element : other.binary_annotations) {
        __this__binary_annotations.add(new com.twitter.zipkin.gen.BinaryAnnotation(other_element));
      }
      this.binary_annotations = __this__binary_annotations;
    }
    this.end_ts = other.end_ts;
    this.limit = other.limit;
    if (other.isSetOrder()) {
      this.order = other.order;
    }
  }

  public QueryRequest deepCopy() {
    return new QueryRequest(this);
  }

  @Override
  public void clear() {
    this.service_name = null;
    this.span_name = null;
    this.annotations = null;
    this.binary_annotations = null;
    setEnd_tsIsSet(false);
    this.end_ts = 0;
    setLimitIsSet(false);
    this.limit = 0;
    this.order = null;
  }

  public String getService_name() {
    return this.service_name;
  }

  public QueryRequest setService_name(String service_name) {
    this.service_name = service_name;
    return this;
  }

  public void unsetService_name() {
    this.service_name = null;
  }

  /** Returns true if field service_name is set (has been asigned a value) and false otherwise */
  public boolean isSetService_name() {
    return this.service_name != null;
  }

  public void setService_nameIsSet(boolean value) {
    if (!value) {
      this.service_name = null;
    }
  }

  public String getSpan_name() {
    return this.span_name;
  }

  public QueryRequest setSpan_name(String span_name) {
    this.span_name = span_name;
    return this;
  }

  public void unsetSpan_name() {
    this.span_name = null;
  }

  /** Returns true if field span_name is set (has been asigned a value) and false otherwise */
  public boolean isSetSpan_name() {
    return this.span_name != null;
  }

  public void setSpan_nameIsSet(boolean value) {
    if (!value) {
      this.span_name = null;
    }
  }

  public int getAnnotationsSize() {
    return (this.annotations == null) ? 0 : this.annotations.size();
  }

  public java.util.Iterator<String> getAnnotationsIterator() {
    return (this.annotations == null) ? null : this.annotations.iterator();
  }

  public void addToAnnotations(String elem) {
    if (this.annotations == null) {
      this.annotations = new ArrayList<String>();
    }
    this.annotations.add(elem);
  }

  public List<String> getAnnotations() {
    return this.annotations;
  }

  public QueryRequest setAnnotations(List<String> annotations) {
    this.annotations = annotations;
    return this;
  }

  public void unsetAnnotations() {
    this.annotations = null;
  }

  /** Returns true if field annotations is set (has been asigned a value) and false otherwise */
  public boolean isSetAnnotations() {
    return this.annotations != null;
  }

  public void setAnnotationsIsSet(boolean value) {
    if (!value) {
      this.annotations = null;
    }
  }

  public int getBinary_annotationsSize() {
    return (this.binary_annotations == null) ? 0 : this.binary_annotations.size();
  }

  public java.util.Iterator<com.twitter.zipkin.gen.BinaryAnnotation> getBinary_annotationsIterator() {
    return (this.binary_annotations == null) ? null : this.binary_annotations.iterator();
  }

  public void addToBinary_annotations(com.twitter.zipkin.gen.BinaryAnnotation elem) {
    if (this.binary_annotations == null) {
      this.binary_annotations = new ArrayList<com.twitter.zipkin.gen.BinaryAnnotation>();
    }
    this.binary_annotations.add(elem);
  }

  public List<com.twitter.zipkin.gen.BinaryAnnotation> getBinary_annotations() {
    return this.binary_annotations;
  }

  public QueryRequest setBinary_annotations(List<com.twitter.zipkin.gen.BinaryAnnotation> binary_annotations) {
    this.binary_annotations = binary_annotations;
    return this;
  }

  public void unsetBinary_annotations() {
    this.binary_annotations = null;
  }

  /** Returns true if field binary_annotations is set (has been asigned a value) and false otherwise */
  public boolean isSetBinary_annotations() {
    return this.binary_annotations != null;
  }

  public void setBinary_annotationsIsSet(boolean value) {
    if (!value) {
      this.binary_annotations = null;
    }
  }

  public long getEnd_ts() {
    return this.end_ts;
  }

  public QueryRequest setEnd_ts(long end_ts) {
    this.end_ts = end_ts;
    setEnd_tsIsSet(true);
    return this;
  }

  public void unsetEnd_ts() {
    __isset_bit_vector.clear(__END_TS_ISSET_ID);
  }

  /** Returns true if field end_ts is set (has been asigned a value) and false otherwise */
  public boolean isSetEnd_ts() {
    return __isset_bit_vector.get(__END_TS_ISSET_ID);
  }

  public void setEnd_tsIsSet(boolean value) {
    __isset_bit_vector.set(__END_TS_ISSET_ID, value);
  }

  public int getLimit() {
    return this.limit;
  }

  public QueryRequest setLimit(int limit) {
    this.limit = limit;
    setLimitIsSet(true);
    return this;
  }

  public void unsetLimit() {
    __isset_bit_vector.clear(__LIMIT_ISSET_ID);
  }

  /** Returns true if field limit is set (has been asigned a value) and false otherwise */
  public boolean isSetLimit() {
    return __isset_bit_vector.get(__LIMIT_ISSET_ID);
  }

  public void setLimitIsSet(boolean value) {
    __isset_bit_vector.set(__LIMIT_ISSET_ID, value);
  }

  /**
   * 
   * @see Order
   */
  public Order getOrder() {
    return this.order;
  }

  /**
   * 
   * @see Order
   */
  public QueryRequest setOrder(Order order) {
    this.order = order;
    return this;
  }

  public void unsetOrder() {
    this.order = null;
  }

  /** Returns true if field order is set (has been asigned a value) and false otherwise */
  public boolean isSetOrder() {
    return this.order != null;
  }

  public void setOrderIsSet(boolean value) {
    if (!value) {
      this.order = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SERVICE_NAME:
      if (value == null) {
        unsetService_name();
      } else {
        setService_name((String)value);
      }
      break;

    case SPAN_NAME:
      if (value == null) {
        unsetSpan_name();
      } else {
        setSpan_name((String)value);
      }
      break;

    case ANNOTATIONS:
      if (value == null) {
        unsetAnnotations();
      } else {
        setAnnotations((List<String>)value);
      }
      break;

    case BINARY_ANNOTATIONS:
      if (value == null) {
        unsetBinary_annotations();
      } else {
        setBinary_annotations((List<com.twitter.zipkin.gen.BinaryAnnotation>)value);
      }
      break;

    case END_TS:
      if (value == null) {
        unsetEnd_ts();
      } else {
        setEnd_ts((Long)value);
      }
      break;

    case LIMIT:
      if (value == null) {
        unsetLimit();
      } else {
        setLimit((Integer)value);
      }
      break;

    case ORDER:
      if (value == null) {
        unsetOrder();
      } else {
        setOrder((Order)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SERVICE_NAME:
      return getService_name();

    case SPAN_NAME:
      return getSpan_name();

    case ANNOTATIONS:
      return getAnnotations();

    case BINARY_ANNOTATIONS:
      return getBinary_annotations();

    case END_TS:
      return new Long(getEnd_ts());

    case LIMIT:
      return new Integer(getLimit());

    case ORDER:
      return getOrder();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SERVICE_NAME:
      return isSetService_name();
    case SPAN_NAME:
      return isSetSpan_name();
    case ANNOTATIONS:
      return isSetAnnotations();
    case BINARY_ANNOTATIONS:
      return isSetBinary_annotations();
    case END_TS:
      return isSetEnd_ts();
    case LIMIT:
      return isSetLimit();
    case ORDER:
      return isSetOrder();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryRequest)
      return this.equals((QueryRequest)that);
    return false;
  }

  public boolean equals(QueryRequest that) {
    if (that == null)
      return false;

    boolean this_present_service_name = true && this.isSetService_name();
    boolean that_present_service_name = true && that.isSetService_name();
    if (this_present_service_name || that_present_service_name) {
      if (!(this_present_service_name && that_present_service_name))
        return false;
      if (!this.service_name.equals(that.service_name))
        return false;
    }

    boolean this_present_span_name = true && this.isSetSpan_name();
    boolean that_present_span_name = true && that.isSetSpan_name();
    if (this_present_span_name || that_present_span_name) {
      if (!(this_present_span_name && that_present_span_name))
        return false;
      if (!this.span_name.equals(that.span_name))
        return false;
    }

    boolean this_present_annotations = true && this.isSetAnnotations();
    boolean that_present_annotations = true && that.isSetAnnotations();
    if (this_present_annotations || that_present_annotations) {
      if (!(this_present_annotations && that_present_annotations))
        return false;
      if (!this.annotations.equals(that.annotations))
        return false;
    }

    boolean this_present_binary_annotations = true && this.isSetBinary_annotations();
    boolean that_present_binary_annotations = true && that.isSetBinary_annotations();
    if (this_present_binary_annotations || that_present_binary_annotations) {
      if (!(this_present_binary_annotations && that_present_binary_annotations))
        return false;
      if (!this.binary_annotations.equals(that.binary_annotations))
        return false;
    }

    boolean this_present_end_ts = true;
    boolean that_present_end_ts = true;
    if (this_present_end_ts || that_present_end_ts) {
      if (!(this_present_end_ts && that_present_end_ts))
        return false;
      if (this.end_ts != that.end_ts)
        return false;
    }

    boolean this_present_limit = true;
    boolean that_present_limit = true;
    if (this_present_limit || that_present_limit) {
      if (!(this_present_limit && that_present_limit))
        return false;
      if (this.limit != that.limit)
        return false;
    }

    boolean this_present_order = true && this.isSetOrder();
    boolean that_present_order = true && that.isSetOrder();
    if (this_present_order || that_present_order) {
      if (!(this_present_order && that_present_order))
        return false;
      if (!this.order.equals(that.order))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(QueryRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    QueryRequest typedOther = (QueryRequest)other;

    lastComparison = Boolean.valueOf(isSetService_name()).compareTo(typedOther.isSetService_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetService_name()) {
      lastComparison = TBaseHelper.compareTo(this.service_name, typedOther.service_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpan_name()).compareTo(typedOther.isSetSpan_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpan_name()) {
      lastComparison = TBaseHelper.compareTo(this.span_name, typedOther.span_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnnotations()).compareTo(typedOther.isSetAnnotations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnnotations()) {
      lastComparison = TBaseHelper.compareTo(this.annotations, typedOther.annotations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBinary_annotations()).compareTo(typedOther.isSetBinary_annotations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinary_annotations()) {
      lastComparison = TBaseHelper.compareTo(this.binary_annotations, typedOther.binary_annotations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnd_ts()).compareTo(typedOther.isSetEnd_ts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnd_ts()) {
      lastComparison = TBaseHelper.compareTo(this.end_ts, typedOther.end_ts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimit()).compareTo(typedOther.isSetLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimit()) {
      lastComparison = TBaseHelper.compareTo(this.limit, typedOther.limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrder()).compareTo(typedOther.isSetOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrder()) {
      lastComparison = TBaseHelper.compareTo(this.order, typedOther.order);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // SERVICE_NAME
          if (field.type == TType.STRING) {
            this.service_name = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // SPAN_NAME
          if (field.type == TType.STRING) {
            this.span_name = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // ANNOTATIONS
          if (field.type == TType.LIST) {
            {
              TList _list26 = iprot.readListBegin();
              this.annotations = new ArrayList<String>(_list26.size);
              for (int _i27 = 0; _i27 < _list26.size; ++_i27)
              {
                String _elem28;
                _elem28 = iprot.readString();
                this.annotations.add(_elem28);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // BINARY_ANNOTATIONS
          if (field.type == TType.LIST) {
            {
              TList _list29 = iprot.readListBegin();
              this.binary_annotations = new ArrayList<com.twitter.zipkin.gen.BinaryAnnotation>(_list29.size);
              for (int _i30 = 0; _i30 < _list29.size; ++_i30)
              {
                com.twitter.zipkin.gen.BinaryAnnotation _elem31;
                _elem31 = new com.twitter.zipkin.gen.BinaryAnnotation();
                _elem31.read(iprot);
                this.binary_annotations.add(_elem31);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // END_TS
          if (field.type == TType.I64) {
            this.end_ts = iprot.readI64();
            setEnd_tsIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // LIMIT
          if (field.type == TType.I32) {
            this.limit = iprot.readI32();
            setLimitIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // ORDER
          if (field.type == TType.I32) {
            this.order = Order.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.service_name != null) {
      oprot.writeFieldBegin(SERVICE_NAME_FIELD_DESC);
      oprot.writeString(this.service_name);
      oprot.writeFieldEnd();
    }
    if (this.span_name != null) {
      if (isSetSpan_name()) {
        oprot.writeFieldBegin(SPAN_NAME_FIELD_DESC);
        oprot.writeString(this.span_name);
        oprot.writeFieldEnd();
      }
    }
    if (this.annotations != null) {
      if (isSetAnnotations()) {
        oprot.writeFieldBegin(ANNOTATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.annotations.size()));
          for (String _iter32 : this.annotations)
          {
            oprot.writeString(_iter32);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.binary_annotations != null) {
      if (isSetBinary_annotations()) {
        oprot.writeFieldBegin(BINARY_ANNOTATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.binary_annotations.size()));
          for (com.twitter.zipkin.gen.BinaryAnnotation _iter33 : this.binary_annotations)
          {
            _iter33.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldBegin(END_TS_FIELD_DESC);
    oprot.writeI64(this.end_ts);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(LIMIT_FIELD_DESC);
    oprot.writeI32(this.limit);
    oprot.writeFieldEnd();
    if (this.order != null) {
      oprot.writeFieldBegin(ORDER_FIELD_DESC);
      oprot.writeI32(this.order.getValue());
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryRequest(");
    boolean first = true;

    sb.append("service_name:");
    if (this.service_name == null) {
      sb.append("null");
    } else {
      sb.append(this.service_name);
    }
    first = false;
    if (isSetSpan_name()) {
      if (!first) sb.append(", ");
      sb.append("span_name:");
      if (this.span_name == null) {
        sb.append("null");
      } else {
        sb.append(this.span_name);
      }
      first = false;
    }
    if (isSetAnnotations()) {
      if (!first) sb.append(", ");
      sb.append("annotations:");
      if (this.annotations == null) {
        sb.append("null");
      } else {
        sb.append(this.annotations);
      }
      first = false;
    }
    if (isSetBinary_annotations()) {
      if (!first) sb.append(", ");
      sb.append("binary_annotations:");
      if (this.binary_annotations == null) {
        sb.append("null");
      } else {
        sb.append(this.binary_annotations);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("end_ts:");
    sb.append(this.end_ts);
    first = false;
    if (!first) sb.append(", ");
    sb.append("limit:");
    sb.append(this.limit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("order:");
    if (this.order == null) {
      sb.append("null");
    } else {
      sb.append(this.order);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

