/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.twitter.zipkin.gen;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

/**
 * This sums up a single Trace to make it easy for a client to get an overview of what happened.
 */
public class TraceTimeline implements TBase<TraceTimeline, TraceTimeline._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("TraceTimeline");

  private static final TField TRACE_ID_FIELD_DESC = new TField("trace_id", TType.I64, (short)1);
  private static final TField ROOT_MOST_SPAN_ID_FIELD_DESC = new TField("root_most_span_id", TType.I64, (short)2);
  private static final TField ANNOTATIONS_FIELD_DESC = new TField("annotations", TType.LIST, (short)6);
  private static final TField BINARY_ANNOTATIONS_FIELD_DESC = new TField("binary_annotations", TType.LIST, (short)7);

  public long trace_id;
  public long root_most_span_id;
  public List<TimelineAnnotation> annotations;
  public List<com.twitter.zipkin.gen.BinaryAnnotation> binary_annotations;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    TRACE_ID((short)1, "trace_id"),
    ROOT_MOST_SPAN_ID((short)2, "root_most_span_id"),
    ANNOTATIONS((short)6, "annotations"),
    BINARY_ANNOTATIONS((short)7, "binary_annotations");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRACE_ID
          return TRACE_ID;
        case 2: // ROOT_MOST_SPAN_ID
          return ROOT_MOST_SPAN_ID;
        case 6: // ANNOTATIONS
          return ANNOTATIONS;
        case 7: // BINARY_ANNOTATIONS
          return BINARY_ANNOTATIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TRACE_ID_ISSET_ID = 0;
  private static final int __ROOT_MOST_SPAN_ID_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRACE_ID, new FieldMetaData("trace_id", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.ROOT_MOST_SPAN_ID, new FieldMetaData("root_most_span_id", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.ANNOTATIONS, new FieldMetaData("annotations", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, TimelineAnnotation.class))));
    tmpMap.put(_Fields.BINARY_ANNOTATIONS, new FieldMetaData("binary_annotations", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, com.twitter.zipkin.gen.BinaryAnnotation.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(TraceTimeline.class, metaDataMap);
  }

  public TraceTimeline() {
  }

  public TraceTimeline(
    long trace_id,
    long root_most_span_id,
    List<TimelineAnnotation> annotations,
    List<com.twitter.zipkin.gen.BinaryAnnotation> binary_annotations)
  {
    this();
    this.trace_id = trace_id;
    setTrace_idIsSet(true);
    this.root_most_span_id = root_most_span_id;
    setRoot_most_span_idIsSet(true);
    this.annotations = annotations;
    this.binary_annotations = binary_annotations;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TraceTimeline(TraceTimeline other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.trace_id = other.trace_id;
    this.root_most_span_id = other.root_most_span_id;
    if (other.isSetAnnotations()) {
      List<TimelineAnnotation> __this__annotations = new ArrayList<TimelineAnnotation>();
      for (TimelineAnnotation other_element : other.annotations) {
        __this__annotations.add(new TimelineAnnotation(other_element));
      }
      this.annotations = __this__annotations;
    }
    if (other.isSetBinary_annotations()) {
      List<com.twitter.zipkin.gen.BinaryAnnotation> __this__binary_annotations = new ArrayList<com.twitter.zipkin.gen.BinaryAnnotation>();
      for (com.twitter.zipkin.gen.BinaryAnnotation other_element : other.binary_annotations) {
        __this__binary_annotations.add(new com.twitter.zipkin.gen.BinaryAnnotation(other_element));
      }
      this.binary_annotations = __this__binary_annotations;
    }
  }

  public TraceTimeline deepCopy() {
    return new TraceTimeline(this);
  }

  @Override
  public void clear() {
    setTrace_idIsSet(false);
    this.trace_id = 0;
    setRoot_most_span_idIsSet(false);
    this.root_most_span_id = 0;
    this.annotations = null;
    this.binary_annotations = null;
  }

  public long getTrace_id() {
    return this.trace_id;
  }

  public TraceTimeline setTrace_id(long trace_id) {
    this.trace_id = trace_id;
    setTrace_idIsSet(true);
    return this;
  }

  public void unsetTrace_id() {
    __isset_bit_vector.clear(__TRACE_ID_ISSET_ID);
  }

  /** Returns true if field trace_id is set (has been asigned a value) and false otherwise */
  public boolean isSetTrace_id() {
    return __isset_bit_vector.get(__TRACE_ID_ISSET_ID);
  }

  public void setTrace_idIsSet(boolean value) {
    __isset_bit_vector.set(__TRACE_ID_ISSET_ID, value);
  }

  public long getRoot_most_span_id() {
    return this.root_most_span_id;
  }

  public TraceTimeline setRoot_most_span_id(long root_most_span_id) {
    this.root_most_span_id = root_most_span_id;
    setRoot_most_span_idIsSet(true);
    return this;
  }

  public void unsetRoot_most_span_id() {
    __isset_bit_vector.clear(__ROOT_MOST_SPAN_ID_ISSET_ID);
  }

  /** Returns true if field root_most_span_id is set (has been asigned a value) and false otherwise */
  public boolean isSetRoot_most_span_id() {
    return __isset_bit_vector.get(__ROOT_MOST_SPAN_ID_ISSET_ID);
  }

  public void setRoot_most_span_idIsSet(boolean value) {
    __isset_bit_vector.set(__ROOT_MOST_SPAN_ID_ISSET_ID, value);
  }

  public int getAnnotationsSize() {
    return (this.annotations == null) ? 0 : this.annotations.size();
  }

  public java.util.Iterator<TimelineAnnotation> getAnnotationsIterator() {
    return (this.annotations == null) ? null : this.annotations.iterator();
  }

  public void addToAnnotations(TimelineAnnotation elem) {
    if (this.annotations == null) {
      this.annotations = new ArrayList<TimelineAnnotation>();
    }
    this.annotations.add(elem);
  }

  public List<TimelineAnnotation> getAnnotations() {
    return this.annotations;
  }

  public TraceTimeline setAnnotations(List<TimelineAnnotation> annotations) {
    this.annotations = annotations;
    return this;
  }

  public void unsetAnnotations() {
    this.annotations = null;
  }

  /** Returns true if field annotations is set (has been asigned a value) and false otherwise */
  public boolean isSetAnnotations() {
    return this.annotations != null;
  }

  public void setAnnotationsIsSet(boolean value) {
    if (!value) {
      this.annotations = null;
    }
  }

  public int getBinary_annotationsSize() {
    return (this.binary_annotations == null) ? 0 : this.binary_annotations.size();
  }

  public java.util.Iterator<com.twitter.zipkin.gen.BinaryAnnotation> getBinary_annotationsIterator() {
    return (this.binary_annotations == null) ? null : this.binary_annotations.iterator();
  }

  public void addToBinary_annotations(com.twitter.zipkin.gen.BinaryAnnotation elem) {
    if (this.binary_annotations == null) {
      this.binary_annotations = new ArrayList<com.twitter.zipkin.gen.BinaryAnnotation>();
    }
    this.binary_annotations.add(elem);
  }

  public List<com.twitter.zipkin.gen.BinaryAnnotation> getBinary_annotations() {
    return this.binary_annotations;
  }

  public TraceTimeline setBinary_annotations(List<com.twitter.zipkin.gen.BinaryAnnotation> binary_annotations) {
    this.binary_annotations = binary_annotations;
    return this;
  }

  public void unsetBinary_annotations() {
    this.binary_annotations = null;
  }

  /** Returns true if field binary_annotations is set (has been asigned a value) and false otherwise */
  public boolean isSetBinary_annotations() {
    return this.binary_annotations != null;
  }

  public void setBinary_annotationsIsSet(boolean value) {
    if (!value) {
      this.binary_annotations = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRACE_ID:
      if (value == null) {
        unsetTrace_id();
      } else {
        setTrace_id((Long)value);
      }
      break;

    case ROOT_MOST_SPAN_ID:
      if (value == null) {
        unsetRoot_most_span_id();
      } else {
        setRoot_most_span_id((Long)value);
      }
      break;

    case ANNOTATIONS:
      if (value == null) {
        unsetAnnotations();
      } else {
        setAnnotations((List<TimelineAnnotation>)value);
      }
      break;

    case BINARY_ANNOTATIONS:
      if (value == null) {
        unsetBinary_annotations();
      } else {
        setBinary_annotations((List<com.twitter.zipkin.gen.BinaryAnnotation>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRACE_ID:
      return new Long(getTrace_id());

    case ROOT_MOST_SPAN_ID:
      return new Long(getRoot_most_span_id());

    case ANNOTATIONS:
      return getAnnotations();

    case BINARY_ANNOTATIONS:
      return getBinary_annotations();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRACE_ID:
      return isSetTrace_id();
    case ROOT_MOST_SPAN_ID:
      return isSetRoot_most_span_id();
    case ANNOTATIONS:
      return isSetAnnotations();
    case BINARY_ANNOTATIONS:
      return isSetBinary_annotations();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TraceTimeline)
      return this.equals((TraceTimeline)that);
    return false;
  }

  public boolean equals(TraceTimeline that) {
    if (that == null)
      return false;

    boolean this_present_trace_id = true;
    boolean that_present_trace_id = true;
    if (this_present_trace_id || that_present_trace_id) {
      if (!(this_present_trace_id && that_present_trace_id))
        return false;
      if (this.trace_id != that.trace_id)
        return false;
    }

    boolean this_present_root_most_span_id = true;
    boolean that_present_root_most_span_id = true;
    if (this_present_root_most_span_id || that_present_root_most_span_id) {
      if (!(this_present_root_most_span_id && that_present_root_most_span_id))
        return false;
      if (this.root_most_span_id != that.root_most_span_id)
        return false;
    }

    boolean this_present_annotations = true && this.isSetAnnotations();
    boolean that_present_annotations = true && that.isSetAnnotations();
    if (this_present_annotations || that_present_annotations) {
      if (!(this_present_annotations && that_present_annotations))
        return false;
      if (!this.annotations.equals(that.annotations))
        return false;
    }

    boolean this_present_binary_annotations = true && this.isSetBinary_annotations();
    boolean that_present_binary_annotations = true && that.isSetBinary_annotations();
    if (this_present_binary_annotations || that_present_binary_annotations) {
      if (!(this_present_binary_annotations && that_present_binary_annotations))
        return false;
      if (!this.binary_annotations.equals(that.binary_annotations))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TraceTimeline other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TraceTimeline typedOther = (TraceTimeline)other;

    lastComparison = Boolean.valueOf(isSetTrace_id()).compareTo(typedOther.isSetTrace_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrace_id()) {
      lastComparison = TBaseHelper.compareTo(this.trace_id, typedOther.trace_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoot_most_span_id()).compareTo(typedOther.isSetRoot_most_span_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoot_most_span_id()) {
      lastComparison = TBaseHelper.compareTo(this.root_most_span_id, typedOther.root_most_span_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnnotations()).compareTo(typedOther.isSetAnnotations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnnotations()) {
      lastComparison = TBaseHelper.compareTo(this.annotations, typedOther.annotations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBinary_annotations()).compareTo(typedOther.isSetBinary_annotations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinary_annotations()) {
      lastComparison = TBaseHelper.compareTo(this.binary_annotations, typedOther.binary_annotations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // TRACE_ID
          if (field.type == TType.I64) {
            this.trace_id = iprot.readI64();
            setTrace_idIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // ROOT_MOST_SPAN_ID
          if (field.type == TType.I64) {
            this.root_most_span_id = iprot.readI64();
            setRoot_most_span_idIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // ANNOTATIONS
          if (field.type == TType.LIST) {
            {
              TList _list13 = iprot.readListBegin();
              this.annotations = new ArrayList<TimelineAnnotation>(_list13.size);
              for (int _i14 = 0; _i14 < _list13.size; ++_i14)
              {
                TimelineAnnotation _elem15;
                _elem15 = new TimelineAnnotation();
                _elem15.read(iprot);
                this.annotations.add(_elem15);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // BINARY_ANNOTATIONS
          if (field.type == TType.LIST) {
            {
              TList _list16 = iprot.readListBegin();
              this.binary_annotations = new ArrayList<com.twitter.zipkin.gen.BinaryAnnotation>(_list16.size);
              for (int _i17 = 0; _i17 < _list16.size; ++_i17)
              {
                com.twitter.zipkin.gen.BinaryAnnotation _elem18;
                _elem18 = new com.twitter.zipkin.gen.BinaryAnnotation();
                _elem18.read(iprot);
                this.binary_annotations.add(_elem18);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(TRACE_ID_FIELD_DESC);
    oprot.writeI64(this.trace_id);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(ROOT_MOST_SPAN_ID_FIELD_DESC);
    oprot.writeI64(this.root_most_span_id);
    oprot.writeFieldEnd();
    if (this.annotations != null) {
      oprot.writeFieldBegin(ANNOTATIONS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.annotations.size()));
        for (TimelineAnnotation _iter19 : this.annotations)
        {
          _iter19.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.binary_annotations != null) {
      oprot.writeFieldBegin(BINARY_ANNOTATIONS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.binary_annotations.size()));
        for (com.twitter.zipkin.gen.BinaryAnnotation _iter20 : this.binary_annotations)
        {
          _iter20.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TraceTimeline(");
    boolean first = true;

    sb.append("trace_id:");
    sb.append(this.trace_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("root_most_span_id:");
    sb.append(this.root_most_span_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("annotations:");
    if (this.annotations == null) {
      sb.append("null");
    } else {
      sb.append(this.annotations);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("binary_annotations:");
    if (this.binary_annotations == null) {
      sb.append("null");
    } else {
      sb.append(this.binary_annotations);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

