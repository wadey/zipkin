/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.twitter.zipkin.gen;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

/**
 * This sums up a single Trace to make it easy for a client to get an overview of what happened.
 */
public class TraceSummary implements TBase<TraceSummary, TraceSummary._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("TraceSummary");

  private static final TField TRACE_ID_FIELD_DESC = new TField("trace_id", TType.I64, (short)1);
  private static final TField START_TIMESTAMP_FIELD_DESC = new TField("start_timestamp", TType.I64, (short)2);
  private static final TField END_TIMESTAMP_FIELD_DESC = new TField("end_timestamp", TType.I64, (short)3);
  private static final TField DURATION_MICRO_FIELD_DESC = new TField("duration_micro", TType.I32, (short)4);
  private static final TField SERVICE_COUNTS_FIELD_DESC = new TField("service_counts", TType.MAP, (short)5);
  private static final TField ENDPOINTS_FIELD_DESC = new TField("endpoints", TType.LIST, (short)6);

  public long trace_id;
  public long start_timestamp;
  public long end_timestamp;
  public int duration_micro;
  public Map<String,Integer> service_counts;
  public List<com.twitter.zipkin.gen.Endpoint> endpoints;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    TRACE_ID((short)1, "trace_id"),
    START_TIMESTAMP((short)2, "start_timestamp"),
    END_TIMESTAMP((short)3, "end_timestamp"),
    DURATION_MICRO((short)4, "duration_micro"),
    SERVICE_COUNTS((short)5, "service_counts"),
    ENDPOINTS((short)6, "endpoints");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRACE_ID
          return TRACE_ID;
        case 2: // START_TIMESTAMP
          return START_TIMESTAMP;
        case 3: // END_TIMESTAMP
          return END_TIMESTAMP;
        case 4: // DURATION_MICRO
          return DURATION_MICRO;
        case 5: // SERVICE_COUNTS
          return SERVICE_COUNTS;
        case 6: // ENDPOINTS
          return ENDPOINTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TRACE_ID_ISSET_ID = 0;
  private static final int __START_TIMESTAMP_ISSET_ID = 1;
  private static final int __END_TIMESTAMP_ISSET_ID = 2;
  private static final int __DURATION_MICRO_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRACE_ID, new FieldMetaData("trace_id", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.START_TIMESTAMP, new FieldMetaData("start_timestamp", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.END_TIMESTAMP, new FieldMetaData("end_timestamp", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.DURATION_MICRO, new FieldMetaData("duration_micro", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.SERVICE_COUNTS, new FieldMetaData("service_counts", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new FieldValueMetaData(TType.I32))));
    tmpMap.put(_Fields.ENDPOINTS, new FieldMetaData("endpoints", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, com.twitter.zipkin.gen.Endpoint.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(TraceSummary.class, metaDataMap);
  }

  public TraceSummary() {
  }

  public TraceSummary(
    long trace_id,
    long start_timestamp,
    long end_timestamp,
    int duration_micro,
    Map<String,Integer> service_counts,
    List<com.twitter.zipkin.gen.Endpoint> endpoints)
  {
    this();
    this.trace_id = trace_id;
    setTrace_idIsSet(true);
    this.start_timestamp = start_timestamp;
    setStart_timestampIsSet(true);
    this.end_timestamp = end_timestamp;
    setEnd_timestampIsSet(true);
    this.duration_micro = duration_micro;
    setDuration_microIsSet(true);
    this.service_counts = service_counts;
    this.endpoints = endpoints;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TraceSummary(TraceSummary other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.trace_id = other.trace_id;
    this.start_timestamp = other.start_timestamp;
    this.end_timestamp = other.end_timestamp;
    this.duration_micro = other.duration_micro;
    if (other.isSetService_counts()) {
      Map<String,Integer> __this__service_counts = new HashMap<String,Integer>();
      for (Map.Entry<String, Integer> other_element : other.service_counts.entrySet()) {

        String other_element_key = other_element.getKey();
        Integer other_element_value = other_element.getValue();

        String __this__service_counts_copy_key = other_element_key;

        Integer __this__service_counts_copy_value = other_element_value;

        __this__service_counts.put(__this__service_counts_copy_key, __this__service_counts_copy_value);
      }
      this.service_counts = __this__service_counts;
    }
    if (other.isSetEndpoints()) {
      List<com.twitter.zipkin.gen.Endpoint> __this__endpoints = new ArrayList<com.twitter.zipkin.gen.Endpoint>();
      for (com.twitter.zipkin.gen.Endpoint other_element : other.endpoints) {
        __this__endpoints.add(new com.twitter.zipkin.gen.Endpoint(other_element));
      }
      this.endpoints = __this__endpoints;
    }
  }

  public TraceSummary deepCopy() {
    return new TraceSummary(this);
  }

  @Override
  public void clear() {
    setTrace_idIsSet(false);
    this.trace_id = 0;
    setStart_timestampIsSet(false);
    this.start_timestamp = 0;
    setEnd_timestampIsSet(false);
    this.end_timestamp = 0;
    setDuration_microIsSet(false);
    this.duration_micro = 0;
    this.service_counts = null;
    this.endpoints = null;
  }

  public long getTrace_id() {
    return this.trace_id;
  }

  public TraceSummary setTrace_id(long trace_id) {
    this.trace_id = trace_id;
    setTrace_idIsSet(true);
    return this;
  }

  public void unsetTrace_id() {
    __isset_bit_vector.clear(__TRACE_ID_ISSET_ID);
  }

  /** Returns true if field trace_id is set (has been asigned a value) and false otherwise */
  public boolean isSetTrace_id() {
    return __isset_bit_vector.get(__TRACE_ID_ISSET_ID);
  }

  public void setTrace_idIsSet(boolean value) {
    __isset_bit_vector.set(__TRACE_ID_ISSET_ID, value);
  }

  public long getStart_timestamp() {
    return this.start_timestamp;
  }

  public TraceSummary setStart_timestamp(long start_timestamp) {
    this.start_timestamp = start_timestamp;
    setStart_timestampIsSet(true);
    return this;
  }

  public void unsetStart_timestamp() {
    __isset_bit_vector.clear(__START_TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field start_timestamp is set (has been asigned a value) and false otherwise */
  public boolean isSetStart_timestamp() {
    return __isset_bit_vector.get(__START_TIMESTAMP_ISSET_ID);
  }

  public void setStart_timestampIsSet(boolean value) {
    __isset_bit_vector.set(__START_TIMESTAMP_ISSET_ID, value);
  }

  public long getEnd_timestamp() {
    return this.end_timestamp;
  }

  public TraceSummary setEnd_timestamp(long end_timestamp) {
    this.end_timestamp = end_timestamp;
    setEnd_timestampIsSet(true);
    return this;
  }

  public void unsetEnd_timestamp() {
    __isset_bit_vector.clear(__END_TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field end_timestamp is set (has been asigned a value) and false otherwise */
  public boolean isSetEnd_timestamp() {
    return __isset_bit_vector.get(__END_TIMESTAMP_ISSET_ID);
  }

  public void setEnd_timestampIsSet(boolean value) {
    __isset_bit_vector.set(__END_TIMESTAMP_ISSET_ID, value);
  }

  public int getDuration_micro() {
    return this.duration_micro;
  }

  public TraceSummary setDuration_micro(int duration_micro) {
    this.duration_micro = duration_micro;
    setDuration_microIsSet(true);
    return this;
  }

  public void unsetDuration_micro() {
    __isset_bit_vector.clear(__DURATION_MICRO_ISSET_ID);
  }

  /** Returns true if field duration_micro is set (has been asigned a value) and false otherwise */
  public boolean isSetDuration_micro() {
    return __isset_bit_vector.get(__DURATION_MICRO_ISSET_ID);
  }

  public void setDuration_microIsSet(boolean value) {
    __isset_bit_vector.set(__DURATION_MICRO_ISSET_ID, value);
  }

  public int getService_countsSize() {
    return (this.service_counts == null) ? 0 : this.service_counts.size();
  }

  public void putToService_counts(String key, int val) {
    if (this.service_counts == null) {
      this.service_counts = new HashMap<String,Integer>();
    }
    this.service_counts.put(key, val);
  }

  public Map<String,Integer> getService_counts() {
    return this.service_counts;
  }

  public TraceSummary setService_counts(Map<String,Integer> service_counts) {
    this.service_counts = service_counts;
    return this;
  }

  public void unsetService_counts() {
    this.service_counts = null;
  }

  /** Returns true if field service_counts is set (has been asigned a value) and false otherwise */
  public boolean isSetService_counts() {
    return this.service_counts != null;
  }

  public void setService_countsIsSet(boolean value) {
    if (!value) {
      this.service_counts = null;
    }
  }

  public int getEndpointsSize() {
    return (this.endpoints == null) ? 0 : this.endpoints.size();
  }

  public java.util.Iterator<com.twitter.zipkin.gen.Endpoint> getEndpointsIterator() {
    return (this.endpoints == null) ? null : this.endpoints.iterator();
  }

  public void addToEndpoints(com.twitter.zipkin.gen.Endpoint elem) {
    if (this.endpoints == null) {
      this.endpoints = new ArrayList<com.twitter.zipkin.gen.Endpoint>();
    }
    this.endpoints.add(elem);
  }

  public List<com.twitter.zipkin.gen.Endpoint> getEndpoints() {
    return this.endpoints;
  }

  public TraceSummary setEndpoints(List<com.twitter.zipkin.gen.Endpoint> endpoints) {
    this.endpoints = endpoints;
    return this;
  }

  public void unsetEndpoints() {
    this.endpoints = null;
  }

  /** Returns true if field endpoints is set (has been asigned a value) and false otherwise */
  public boolean isSetEndpoints() {
    return this.endpoints != null;
  }

  public void setEndpointsIsSet(boolean value) {
    if (!value) {
      this.endpoints = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRACE_ID:
      if (value == null) {
        unsetTrace_id();
      } else {
        setTrace_id((Long)value);
      }
      break;

    case START_TIMESTAMP:
      if (value == null) {
        unsetStart_timestamp();
      } else {
        setStart_timestamp((Long)value);
      }
      break;

    case END_TIMESTAMP:
      if (value == null) {
        unsetEnd_timestamp();
      } else {
        setEnd_timestamp((Long)value);
      }
      break;

    case DURATION_MICRO:
      if (value == null) {
        unsetDuration_micro();
      } else {
        setDuration_micro((Integer)value);
      }
      break;

    case SERVICE_COUNTS:
      if (value == null) {
        unsetService_counts();
      } else {
        setService_counts((Map<String,Integer>)value);
      }
      break;

    case ENDPOINTS:
      if (value == null) {
        unsetEndpoints();
      } else {
        setEndpoints((List<com.twitter.zipkin.gen.Endpoint>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRACE_ID:
      return new Long(getTrace_id());

    case START_TIMESTAMP:
      return new Long(getStart_timestamp());

    case END_TIMESTAMP:
      return new Long(getEnd_timestamp());

    case DURATION_MICRO:
      return new Integer(getDuration_micro());

    case SERVICE_COUNTS:
      return getService_counts();

    case ENDPOINTS:
      return getEndpoints();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRACE_ID:
      return isSetTrace_id();
    case START_TIMESTAMP:
      return isSetStart_timestamp();
    case END_TIMESTAMP:
      return isSetEnd_timestamp();
    case DURATION_MICRO:
      return isSetDuration_micro();
    case SERVICE_COUNTS:
      return isSetService_counts();
    case ENDPOINTS:
      return isSetEndpoints();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TraceSummary)
      return this.equals((TraceSummary)that);
    return false;
  }

  public boolean equals(TraceSummary that) {
    if (that == null)
      return false;

    boolean this_present_trace_id = true;
    boolean that_present_trace_id = true;
    if (this_present_trace_id || that_present_trace_id) {
      if (!(this_present_trace_id && that_present_trace_id))
        return false;
      if (this.trace_id != that.trace_id)
        return false;
    }

    boolean this_present_start_timestamp = true;
    boolean that_present_start_timestamp = true;
    if (this_present_start_timestamp || that_present_start_timestamp) {
      if (!(this_present_start_timestamp && that_present_start_timestamp))
        return false;
      if (this.start_timestamp != that.start_timestamp)
        return false;
    }

    boolean this_present_end_timestamp = true;
    boolean that_present_end_timestamp = true;
    if (this_present_end_timestamp || that_present_end_timestamp) {
      if (!(this_present_end_timestamp && that_present_end_timestamp))
        return false;
      if (this.end_timestamp != that.end_timestamp)
        return false;
    }

    boolean this_present_duration_micro = true;
    boolean that_present_duration_micro = true;
    if (this_present_duration_micro || that_present_duration_micro) {
      if (!(this_present_duration_micro && that_present_duration_micro))
        return false;
      if (this.duration_micro != that.duration_micro)
        return false;
    }

    boolean this_present_service_counts = true && this.isSetService_counts();
    boolean that_present_service_counts = true && that.isSetService_counts();
    if (this_present_service_counts || that_present_service_counts) {
      if (!(this_present_service_counts && that_present_service_counts))
        return false;
      if (!this.service_counts.equals(that.service_counts))
        return false;
    }

    boolean this_present_endpoints = true && this.isSetEndpoints();
    boolean that_present_endpoints = true && that.isSetEndpoints();
    if (this_present_endpoints || that_present_endpoints) {
      if (!(this_present_endpoints && that_present_endpoints))
        return false;
      if (!this.endpoints.equals(that.endpoints))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TraceSummary other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TraceSummary typedOther = (TraceSummary)other;

    lastComparison = Boolean.valueOf(isSetTrace_id()).compareTo(typedOther.isSetTrace_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrace_id()) {
      lastComparison = TBaseHelper.compareTo(this.trace_id, typedOther.trace_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStart_timestamp()).compareTo(typedOther.isSetStart_timestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart_timestamp()) {
      lastComparison = TBaseHelper.compareTo(this.start_timestamp, typedOther.start_timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnd_timestamp()).compareTo(typedOther.isSetEnd_timestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnd_timestamp()) {
      lastComparison = TBaseHelper.compareTo(this.end_timestamp, typedOther.end_timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDuration_micro()).compareTo(typedOther.isSetDuration_micro());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDuration_micro()) {
      lastComparison = TBaseHelper.compareTo(this.duration_micro, typedOther.duration_micro);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetService_counts()).compareTo(typedOther.isSetService_counts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetService_counts()) {
      lastComparison = TBaseHelper.compareTo(this.service_counts, typedOther.service_counts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndpoints()).compareTo(typedOther.isSetEndpoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndpoints()) {
      lastComparison = TBaseHelper.compareTo(this.endpoints, typedOther.endpoints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // TRACE_ID
          if (field.type == TType.I64) {
            this.trace_id = iprot.readI64();
            setTrace_idIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // START_TIMESTAMP
          if (field.type == TType.I64) {
            this.start_timestamp = iprot.readI64();
            setStart_timestampIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // END_TIMESTAMP
          if (field.type == TType.I64) {
            this.end_timestamp = iprot.readI64();
            setEnd_timestampIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // DURATION_MICRO
          if (field.type == TType.I32) {
            this.duration_micro = iprot.readI32();
            setDuration_microIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // SERVICE_COUNTS
          if (field.type == TType.MAP) {
            {
              TMap _map4 = iprot.readMapBegin();
              this.service_counts = new HashMap<String,Integer>(2*_map4.size);
              for (int _i5 = 0; _i5 < _map4.size; ++_i5)
              {
                String _key6;
                int _val7;
                _key6 = iprot.readString();
                _val7 = iprot.readI32();
                this.service_counts.put(_key6, _val7);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // ENDPOINTS
          if (field.type == TType.LIST) {
            {
              TList _list8 = iprot.readListBegin();
              this.endpoints = new ArrayList<com.twitter.zipkin.gen.Endpoint>(_list8.size);
              for (int _i9 = 0; _i9 < _list8.size; ++_i9)
              {
                com.twitter.zipkin.gen.Endpoint _elem10;
                _elem10 = new com.twitter.zipkin.gen.Endpoint();
                _elem10.read(iprot);
                this.endpoints.add(_elem10);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(TRACE_ID_FIELD_DESC);
    oprot.writeI64(this.trace_id);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(START_TIMESTAMP_FIELD_DESC);
    oprot.writeI64(this.start_timestamp);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(END_TIMESTAMP_FIELD_DESC);
    oprot.writeI64(this.end_timestamp);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(DURATION_MICRO_FIELD_DESC);
    oprot.writeI32(this.duration_micro);
    oprot.writeFieldEnd();
    if (this.service_counts != null) {
      oprot.writeFieldBegin(SERVICE_COUNTS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.I32, this.service_counts.size()));
        for (Map.Entry<String, Integer> _iter11 : this.service_counts.entrySet())
        {
          oprot.writeString(_iter11.getKey());
          oprot.writeI32(_iter11.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.endpoints != null) {
      oprot.writeFieldBegin(ENDPOINTS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.endpoints.size()));
        for (com.twitter.zipkin.gen.Endpoint _iter12 : this.endpoints)
        {
          _iter12.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TraceSummary(");
    boolean first = true;

    sb.append("trace_id:");
    sb.append(this.trace_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("start_timestamp:");
    sb.append(this.start_timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("end_timestamp:");
    sb.append(this.end_timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("duration_micro:");
    sb.append(this.duration_micro);
    first = false;
    if (!first) sb.append(", ");
    sb.append("service_counts:");
    if (this.service_counts == null) {
      sb.append("null");
    } else {
      sb.append(this.service_counts);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endpoints:");
    if (this.endpoints == null) {
      sb.append("null");
    } else {
      sb.append(this.endpoints);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

