/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.twitter.zipkin.gen;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

/**
 * Returns a combination of trace, summary and timeline.
 */
public class TraceCombo implements TBase<TraceCombo, TraceCombo._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("TraceCombo");

  private static final TField TRACE_FIELD_DESC = new TField("trace", TType.STRUCT, (short)1);
  private static final TField SUMMARY_FIELD_DESC = new TField("summary", TType.STRUCT, (short)2);
  private static final TField TIMELINE_FIELD_DESC = new TField("timeline", TType.STRUCT, (short)3);
  private static final TField SPAN_DEPTHS_FIELD_DESC = new TField("span_depths", TType.MAP, (short)4);

  public Trace trace;
  public TraceSummary summary;
  public TraceTimeline timeline;
  public Map<Long,Integer> span_depths;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    TRACE((short)1, "trace"),
    SUMMARY((short)2, "summary"),
    TIMELINE((short)3, "timeline"),
    SPAN_DEPTHS((short)4, "span_depths");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRACE
          return TRACE;
        case 2: // SUMMARY
          return SUMMARY;
        case 3: // TIMELINE
          return TIMELINE;
        case 4: // SPAN_DEPTHS
          return SPAN_DEPTHS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRACE, new FieldMetaData("trace", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, Trace.class)));
    tmpMap.put(_Fields.SUMMARY, new FieldMetaData("summary", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, TraceSummary.class)));
    tmpMap.put(_Fields.TIMELINE, new FieldMetaData("timeline", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, TraceTimeline.class)));
    tmpMap.put(_Fields.SPAN_DEPTHS, new FieldMetaData("span_depths", TFieldRequirementType.OPTIONAL, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I64), 
            new FieldValueMetaData(TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(TraceCombo.class, metaDataMap);
  }

  public TraceCombo() {
  }

  public TraceCombo(
    Trace trace)
  {
    this();
    this.trace = trace;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TraceCombo(TraceCombo other) {
    if (other.isSetTrace()) {
      this.trace = new Trace(other.trace);
    }
    if (other.isSetSummary()) {
      this.summary = new TraceSummary(other.summary);
    }
    if (other.isSetTimeline()) {
      this.timeline = new TraceTimeline(other.timeline);
    }
    if (other.isSetSpan_depths()) {
      Map<Long,Integer> __this__span_depths = new HashMap<Long,Integer>();
      for (Map.Entry<Long, Integer> other_element : other.span_depths.entrySet()) {

        Long other_element_key = other_element.getKey();
        Integer other_element_value = other_element.getValue();

        Long __this__span_depths_copy_key = other_element_key;

        Integer __this__span_depths_copy_value = other_element_value;

        __this__span_depths.put(__this__span_depths_copy_key, __this__span_depths_copy_value);
      }
      this.span_depths = __this__span_depths;
    }
  }

  public TraceCombo deepCopy() {
    return new TraceCombo(this);
  }

  @Override
  public void clear() {
    this.trace = null;
    this.summary = null;
    this.timeline = null;
    this.span_depths = null;
  }

  public Trace getTrace() {
    return this.trace;
  }

  public TraceCombo setTrace(Trace trace) {
    this.trace = trace;
    return this;
  }

  public void unsetTrace() {
    this.trace = null;
  }

  /** Returns true if field trace is set (has been asigned a value) and false otherwise */
  public boolean isSetTrace() {
    return this.trace != null;
  }

  public void setTraceIsSet(boolean value) {
    if (!value) {
      this.trace = null;
    }
  }

  public TraceSummary getSummary() {
    return this.summary;
  }

  public TraceCombo setSummary(TraceSummary summary) {
    this.summary = summary;
    return this;
  }

  public void unsetSummary() {
    this.summary = null;
  }

  /** Returns true if field summary is set (has been asigned a value) and false otherwise */
  public boolean isSetSummary() {
    return this.summary != null;
  }

  public void setSummaryIsSet(boolean value) {
    if (!value) {
      this.summary = null;
    }
  }

  public TraceTimeline getTimeline() {
    return this.timeline;
  }

  public TraceCombo setTimeline(TraceTimeline timeline) {
    this.timeline = timeline;
    return this;
  }

  public void unsetTimeline() {
    this.timeline = null;
  }

  /** Returns true if field timeline is set (has been asigned a value) and false otherwise */
  public boolean isSetTimeline() {
    return this.timeline != null;
  }

  public void setTimelineIsSet(boolean value) {
    if (!value) {
      this.timeline = null;
    }
  }

  public int getSpan_depthsSize() {
    return (this.span_depths == null) ? 0 : this.span_depths.size();
  }

  public void putToSpan_depths(long key, int val) {
    if (this.span_depths == null) {
      this.span_depths = new HashMap<Long,Integer>();
    }
    this.span_depths.put(key, val);
  }

  public Map<Long,Integer> getSpan_depths() {
    return this.span_depths;
  }

  public TraceCombo setSpan_depths(Map<Long,Integer> span_depths) {
    this.span_depths = span_depths;
    return this;
  }

  public void unsetSpan_depths() {
    this.span_depths = null;
  }

  /** Returns true if field span_depths is set (has been asigned a value) and false otherwise */
  public boolean isSetSpan_depths() {
    return this.span_depths != null;
  }

  public void setSpan_depthsIsSet(boolean value) {
    if (!value) {
      this.span_depths = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRACE:
      if (value == null) {
        unsetTrace();
      } else {
        setTrace((Trace)value);
      }
      break;

    case SUMMARY:
      if (value == null) {
        unsetSummary();
      } else {
        setSummary((TraceSummary)value);
      }
      break;

    case TIMELINE:
      if (value == null) {
        unsetTimeline();
      } else {
        setTimeline((TraceTimeline)value);
      }
      break;

    case SPAN_DEPTHS:
      if (value == null) {
        unsetSpan_depths();
      } else {
        setSpan_depths((Map<Long,Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRACE:
      return getTrace();

    case SUMMARY:
      return getSummary();

    case TIMELINE:
      return getTimeline();

    case SPAN_DEPTHS:
      return getSpan_depths();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRACE:
      return isSetTrace();
    case SUMMARY:
      return isSetSummary();
    case TIMELINE:
      return isSetTimeline();
    case SPAN_DEPTHS:
      return isSetSpan_depths();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TraceCombo)
      return this.equals((TraceCombo)that);
    return false;
  }

  public boolean equals(TraceCombo that) {
    if (that == null)
      return false;

    boolean this_present_trace = true && this.isSetTrace();
    boolean that_present_trace = true && that.isSetTrace();
    if (this_present_trace || that_present_trace) {
      if (!(this_present_trace && that_present_trace))
        return false;
      if (!this.trace.equals(that.trace))
        return false;
    }

    boolean this_present_summary = true && this.isSetSummary();
    boolean that_present_summary = true && that.isSetSummary();
    if (this_present_summary || that_present_summary) {
      if (!(this_present_summary && that_present_summary))
        return false;
      if (!this.summary.equals(that.summary))
        return false;
    }

    boolean this_present_timeline = true && this.isSetTimeline();
    boolean that_present_timeline = true && that.isSetTimeline();
    if (this_present_timeline || that_present_timeline) {
      if (!(this_present_timeline && that_present_timeline))
        return false;
      if (!this.timeline.equals(that.timeline))
        return false;
    }

    boolean this_present_span_depths = true && this.isSetSpan_depths();
    boolean that_present_span_depths = true && that.isSetSpan_depths();
    if (this_present_span_depths || that_present_span_depths) {
      if (!(this_present_span_depths && that_present_span_depths))
        return false;
      if (!this.span_depths.equals(that.span_depths))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TraceCombo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TraceCombo typedOther = (TraceCombo)other;

    lastComparison = Boolean.valueOf(isSetTrace()).compareTo(typedOther.isSetTrace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrace()) {
      lastComparison = TBaseHelper.compareTo(this.trace, typedOther.trace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSummary()).compareTo(typedOther.isSetSummary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSummary()) {
      lastComparison = TBaseHelper.compareTo(this.summary, typedOther.summary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeline()).compareTo(typedOther.isSetTimeline());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeline()) {
      lastComparison = TBaseHelper.compareTo(this.timeline, typedOther.timeline);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpan_depths()).compareTo(typedOther.isSetSpan_depths());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpan_depths()) {
      lastComparison = TBaseHelper.compareTo(this.span_depths, typedOther.span_depths);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // TRACE
          if (field.type == TType.STRUCT) {
            this.trace = new Trace();
            this.trace.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // SUMMARY
          if (field.type == TType.STRUCT) {
            this.summary = new TraceSummary();
            this.summary.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // TIMELINE
          if (field.type == TType.STRUCT) {
            this.timeline = new TraceTimeline();
            this.timeline.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // SPAN_DEPTHS
          if (field.type == TType.MAP) {
            {
              TMap _map21 = iprot.readMapBegin();
              this.span_depths = new HashMap<Long,Integer>(2*_map21.size);
              for (int _i22 = 0; _i22 < _map21.size; ++_i22)
              {
                long _key23;
                int _val24;
                _key23 = iprot.readI64();
                _val24 = iprot.readI32();
                this.span_depths.put(_key23, _val24);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.trace != null) {
      oprot.writeFieldBegin(TRACE_FIELD_DESC);
      this.trace.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.summary != null) {
      if (isSetSummary()) {
        oprot.writeFieldBegin(SUMMARY_FIELD_DESC);
        this.summary.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.timeline != null) {
      if (isSetTimeline()) {
        oprot.writeFieldBegin(TIMELINE_FIELD_DESC);
        this.timeline.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.span_depths != null) {
      if (isSetSpan_depths()) {
        oprot.writeFieldBegin(SPAN_DEPTHS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.I64, TType.I32, this.span_depths.size()));
          for (Map.Entry<Long, Integer> _iter25 : this.span_depths.entrySet())
          {
            oprot.writeI64(_iter25.getKey());
            oprot.writeI32(_iter25.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TraceCombo(");
    boolean first = true;

    sb.append("trace:");
    if (this.trace == null) {
      sb.append("null");
    } else {
      sb.append(this.trace);
    }
    first = false;
    if (isSetSummary()) {
      if (!first) sb.append(", ");
      sb.append("summary:");
      if (this.summary == null) {
        sb.append("null");
      } else {
        sb.append(this.summary);
      }
      first = false;
    }
    if (isSetTimeline()) {
      if (!first) sb.append(", ");
      sb.append("timeline:");
      if (this.timeline == null) {
        sb.append("null");
      } else {
        sb.append(this.timeline);
      }
      first = false;
    }
    if (isSetSpan_depths()) {
      if (!first) sb.append(", ");
      sb.append("span_depths:");
      if (this.span_depths == null) {
        sb.append("null");
      } else {
        sb.append(this.span_depths);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

