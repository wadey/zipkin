/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.twitter.zipkin.gen;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class QueryResponse implements TBase<QueryResponse, QueryResponse._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("QueryResponse");

  private static final TField TRACE_IDS_FIELD_DESC = new TField("trace_ids", TType.LIST, (short)1);
  private static final TField START_TS_FIELD_DESC = new TField("start_ts", TType.I64, (short)2);
  private static final TField END_TS_FIELD_DESC = new TField("end_ts", TType.I64, (short)3);

  public List<Long> trace_ids;
  public long start_ts;
  public long end_ts;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    TRACE_IDS((short)1, "trace_ids"),
    START_TS((short)2, "start_ts"),
    END_TS((short)3, "end_ts");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRACE_IDS
          return TRACE_IDS;
        case 2: // START_TS
          return START_TS;
        case 3: // END_TS
          return END_TS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __START_TS_ISSET_ID = 0;
  private static final int __END_TS_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRACE_IDS, new FieldMetaData("trace_ids", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.I64))));
    tmpMap.put(_Fields.START_TS, new FieldMetaData("start_ts", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.END_TS, new FieldMetaData("end_ts", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(QueryResponse.class, metaDataMap);
  }

  public QueryResponse() {
  }

  public QueryResponse(
    List<Long> trace_ids,
    long start_ts,
    long end_ts)
  {
    this();
    this.trace_ids = trace_ids;
    this.start_ts = start_ts;
    setStart_tsIsSet(true);
    this.end_ts = end_ts;
    setEnd_tsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryResponse(QueryResponse other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetTrace_ids()) {
      List<Long> __this__trace_ids = new ArrayList<Long>();
      for (Long other_element : other.trace_ids) {
        __this__trace_ids.add(other_element);
      }
      this.trace_ids = __this__trace_ids;
    }
    this.start_ts = other.start_ts;
    this.end_ts = other.end_ts;
  }

  public QueryResponse deepCopy() {
    return new QueryResponse(this);
  }

  @Override
  public void clear() {
    this.trace_ids = null;
    setStart_tsIsSet(false);
    this.start_ts = 0;
    setEnd_tsIsSet(false);
    this.end_ts = 0;
  }

  public int getTrace_idsSize() {
    return (this.trace_ids == null) ? 0 : this.trace_ids.size();
  }

  public java.util.Iterator<Long> getTrace_idsIterator() {
    return (this.trace_ids == null) ? null : this.trace_ids.iterator();
  }

  public void addToTrace_ids(long elem) {
    if (this.trace_ids == null) {
      this.trace_ids = new ArrayList<Long>();
    }
    this.trace_ids.add(elem);
  }

  public List<Long> getTrace_ids() {
    return this.trace_ids;
  }

  public QueryResponse setTrace_ids(List<Long> trace_ids) {
    this.trace_ids = trace_ids;
    return this;
  }

  public void unsetTrace_ids() {
    this.trace_ids = null;
  }

  /** Returns true if field trace_ids is set (has been asigned a value) and false otherwise */
  public boolean isSetTrace_ids() {
    return this.trace_ids != null;
  }

  public void setTrace_idsIsSet(boolean value) {
    if (!value) {
      this.trace_ids = null;
    }
  }

  public long getStart_ts() {
    return this.start_ts;
  }

  public QueryResponse setStart_ts(long start_ts) {
    this.start_ts = start_ts;
    setStart_tsIsSet(true);
    return this;
  }

  public void unsetStart_ts() {
    __isset_bit_vector.clear(__START_TS_ISSET_ID);
  }

  /** Returns true if field start_ts is set (has been asigned a value) and false otherwise */
  public boolean isSetStart_ts() {
    return __isset_bit_vector.get(__START_TS_ISSET_ID);
  }

  public void setStart_tsIsSet(boolean value) {
    __isset_bit_vector.set(__START_TS_ISSET_ID, value);
  }

  public long getEnd_ts() {
    return this.end_ts;
  }

  public QueryResponse setEnd_ts(long end_ts) {
    this.end_ts = end_ts;
    setEnd_tsIsSet(true);
    return this;
  }

  public void unsetEnd_ts() {
    __isset_bit_vector.clear(__END_TS_ISSET_ID);
  }

  /** Returns true if field end_ts is set (has been asigned a value) and false otherwise */
  public boolean isSetEnd_ts() {
    return __isset_bit_vector.get(__END_TS_ISSET_ID);
  }

  public void setEnd_tsIsSet(boolean value) {
    __isset_bit_vector.set(__END_TS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRACE_IDS:
      if (value == null) {
        unsetTrace_ids();
      } else {
        setTrace_ids((List<Long>)value);
      }
      break;

    case START_TS:
      if (value == null) {
        unsetStart_ts();
      } else {
        setStart_ts((Long)value);
      }
      break;

    case END_TS:
      if (value == null) {
        unsetEnd_ts();
      } else {
        setEnd_ts((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRACE_IDS:
      return getTrace_ids();

    case START_TS:
      return new Long(getStart_ts());

    case END_TS:
      return new Long(getEnd_ts());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRACE_IDS:
      return isSetTrace_ids();
    case START_TS:
      return isSetStart_ts();
    case END_TS:
      return isSetEnd_ts();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryResponse)
      return this.equals((QueryResponse)that);
    return false;
  }

  public boolean equals(QueryResponse that) {
    if (that == null)
      return false;

    boolean this_present_trace_ids = true && this.isSetTrace_ids();
    boolean that_present_trace_ids = true && that.isSetTrace_ids();
    if (this_present_trace_ids || that_present_trace_ids) {
      if (!(this_present_trace_ids && that_present_trace_ids))
        return false;
      if (!this.trace_ids.equals(that.trace_ids))
        return false;
    }

    boolean this_present_start_ts = true;
    boolean that_present_start_ts = true;
    if (this_present_start_ts || that_present_start_ts) {
      if (!(this_present_start_ts && that_present_start_ts))
        return false;
      if (this.start_ts != that.start_ts)
        return false;
    }

    boolean this_present_end_ts = true;
    boolean that_present_end_ts = true;
    if (this_present_end_ts || that_present_end_ts) {
      if (!(this_present_end_ts && that_present_end_ts))
        return false;
      if (this.end_ts != that.end_ts)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(QueryResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    QueryResponse typedOther = (QueryResponse)other;

    lastComparison = Boolean.valueOf(isSetTrace_ids()).compareTo(typedOther.isSetTrace_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrace_ids()) {
      lastComparison = TBaseHelper.compareTo(this.trace_ids, typedOther.trace_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStart_ts()).compareTo(typedOther.isSetStart_ts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart_ts()) {
      lastComparison = TBaseHelper.compareTo(this.start_ts, typedOther.start_ts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnd_ts()).compareTo(typedOther.isSetEnd_ts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnd_ts()) {
      lastComparison = TBaseHelper.compareTo(this.end_ts, typedOther.end_ts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // TRACE_IDS
          if (field.type == TType.LIST) {
            {
              TList _list34 = iprot.readListBegin();
              this.trace_ids = new ArrayList<Long>(_list34.size);
              for (int _i35 = 0; _i35 < _list34.size; ++_i35)
              {
                long _elem36;
                _elem36 = iprot.readI64();
                this.trace_ids.add(_elem36);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // START_TS
          if (field.type == TType.I64) {
            this.start_ts = iprot.readI64();
            setStart_tsIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // END_TS
          if (field.type == TType.I64) {
            this.end_ts = iprot.readI64();
            setEnd_tsIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.trace_ids != null) {
      oprot.writeFieldBegin(TRACE_IDS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.I64, this.trace_ids.size()));
        for (long _iter37 : this.trace_ids)
        {
          oprot.writeI64(_iter37);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(START_TS_FIELD_DESC);
    oprot.writeI64(this.start_ts);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(END_TS_FIELD_DESC);
    oprot.writeI64(this.end_ts);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryResponse(");
    boolean first = true;

    sb.append("trace_ids:");
    if (this.trace_ids == null) {
      sb.append("null");
    } else {
      sb.append(this.trace_ids);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("start_ts:");
    sb.append(this.start_ts);
    first = false;
    if (!first) sb.append(", ");
    sb.append("end_ts:");
    sb.append(this.end_ts);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

